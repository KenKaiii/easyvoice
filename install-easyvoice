#!/bin/bash
# EasyVoice Universal Installer
# One-command installation for all platforms
# Usage: curl -sSL [URL]/install-easyvoice | bash

set -e

# Check for test mode
if [[ "$1" == "--test" ]]; then
    TEST_MODE=true
else
    TEST_MODE=false
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Repository information
REPO_URL="https://raw.githubusercontent.com/KenKaiii/easyvoice/main"
PROJECT_NAME="EasyVoice"

# Helper functions
print_header() {
    echo -e "${CYAN}"
    echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
    echo "‚îÇ       üé§ EasyVoice Installer       ‚îÇ"
    echo "‚îÇ   Lightweight Voice Agent CLI      ‚îÇ"
    echo "‚îÇ        Created by Ken Kai           ‚îÇ"
    echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
    echo -e "${NC}"
}

print_step() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        OS="linux"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macos"
    elif [[ "$OSTYPE" == "cygwin" ]]; then
        OS="windows"
    elif [[ "$OSTYPE" == "msys" ]]; then
        OS="windows"
    elif [[ "$OSTYPE" == "win32" ]]; then
        OS="windows"
    else
        OS="unknown"
    fi
}

check_dependencies() {
    print_step "Checking system dependencies..."
    
    # Check for Python 3.10+
    if command -v python3 &> /dev/null; then
        PYTHON_VERSION=$(python3 -c "import sys; print('.'.join(map(str, sys.version_info[:2])))")
        if python3 -c "import sys; sys.exit(0 if sys.version_info >= (3, 10) else 1)" &> /dev/null; then
            print_success "Python $PYTHON_VERSION found"
        else
            print_error "Python 3.10+ required, found $PYTHON_VERSION"
            print_step "Please upgrade Python and try again"
            exit 1
        fi
    else
        print_error "Python 3 not found"
        print_step "Please install Python 3.10+ and try again"
        exit 1
    fi

    # Check for pip
    if ! command -v pip3 &> /dev/null; then
        print_warning "pip3 not found, but will be handled by installer"
    fi
}

download_and_run_installer() {
    local installer_script=""
    local temp_dir=""
    
    case $OS in
        "linux"|"macos")
            installer_script="install.sh"
            if [[ "$TEST_MODE" == "true" ]]; then
                temp_dir="."
            else
                temp_dir=$(mktemp -d)
            fi
            ;;
        "windows")
            print_step "Windows detected!"
            print_step "Please run this PowerShell command instead:"
            echo -e "${CYAN}irm ${REPO_URL}/install-easyvoice.ps1 | iex${NC}"
            echo ""
            print_step "Or download and run install.bat manually from:"
            echo -e "${CYAN}${REPO_URL}/install.bat${NC}"
            exit 0
            ;;
        *)
            print_error "Unsupported operating system: $OSTYPE"
            print_step "Please install manually or contact support"
            exit 1
            ;;
    esac

    if [[ "$TEST_MODE" == "true" ]]; then
        print_step "TEST MODE: Would download and run ${installer_script}"
        print_success "Universal installer working correctly!"
        return 0
    fi

    print_step "Downloading installer for $OS..."
    
    if command -v curl &> /dev/null; then
        curl -sSL "${REPO_URL}/${installer_script}" -o "${temp_dir}/${installer_script}"
    elif command -v wget &> /dev/null; then
        wget -q "${REPO_URL}/${installer_script}" -O "${temp_dir}/${installer_script}"
    else
        print_error "Neither curl nor wget found"
        print_step "Please install curl or wget and try again"
        exit 1
    fi

    # Verify download
    if [[ ! -f "${temp_dir}/${installer_script}" ]]; then
        print_error "Failed to download installer"
        exit 1
    fi

    print_step "Running ${installer_script}..."
    chmod +x "${temp_dir}/${installer_script}"
    
    # Run the installer
    cd "${temp_dir}"
    ./"${installer_script}"
    
    # Cleanup
    rm -rf "${temp_dir}"
}

setup_openai_api() {
    if [[ "$TEST_MODE" == "true" ]]; then
        print_step "TEST MODE: Would setup OpenAI API"
        return 0
    fi
    
    echo ""
    print_step "Setting up OpenAI API for seamless experience..."
    
    # Check if API key is already set
    if [[ -n "${OPENAI_API_KEY:-}" ]]; then
        print_success "OpenAI API key already configured"
        return 0
    fi
    
    echo ""
    echo -e "${CYAN}EasyVoice uses OpenAI for the best voice AI experience.${NC}"
    echo -e "${YELLOW}You'll need an OpenAI API key (get one at: https://platform.openai.com/api-keys)${NC}"
    echo ""
    
    # Prompt for API key
    read -p "$(echo -e ${BLUE}Enter your OpenAI API key [or press Enter to skip]:${NC} )" api_key
    
    if [[ -n "$api_key" ]]; then
        # Add to shell profile
        local shell_profile=""
        if [[ -f "$HOME/.zshrc" ]]; then
            shell_profile="$HOME/.zshrc"
        elif [[ -f "$HOME/.bash_profile" ]]; then
            shell_profile="$HOME/.bash_profile"
        elif [[ -f "$HOME/.bashrc" ]]; then
            shell_profile="$HOME/.bashrc"
        fi
        
        if [[ -n "$shell_profile" ]]; then
            echo "export OPENAI_API_KEY=\"$api_key\"" >> "$shell_profile"
            export OPENAI_API_KEY="$api_key"
            print_success "OpenAI API key saved to $shell_profile"
        else
            export OPENAI_API_KEY="$api_key"
            print_warning "API key set for this session only"
            print_step "Add 'export OPENAI_API_KEY=\"$api_key\"' to your shell profile"
        fi
        
        return 0
    else
        print_warning "Skipping API key setup - you can set it later with:"
        print_step "export OPENAI_API_KEY=\"your-key-here\""
        return 1
    fi
}

verify_installation() {
    if [[ "$TEST_MODE" == "true" ]]; then
        print_step "TEST MODE: Would verify installation"
        return 0
    fi
    
    print_step "Verifying installation..."
    
    if command -v easyvoice &> /dev/null; then
        local version=$(easyvoice --version 2>/dev/null || echo "unknown")
        print_success "EasyVoice installed successfully! Version: $version"
        
        # Test basic functionality
        if [[ -n "${OPENAI_API_KEY:-}" ]]; then
            print_step "Testing OpenAI connection..."
            if timeout 10 easyvoice ask "Hello" &>/dev/null; then
                print_success "OpenAI integration working!"
            else
                print_warning "OpenAI test failed - check your API key and internet connection"
            fi
        fi
        
        return 0
    else
        print_warning "easyvoice command not found in PATH"
        print_step "You may need to restart your terminal or add ~/.local/bin to PATH"
        return 1
    fi
}

show_next_steps() {
    echo ""
    echo -e "${GREEN}üéâ EasyVoice is Ready!${NC}"
    echo ""
    
    if [[ -n "${OPENAI_API_KEY:-}" ]]; then
        echo -e "${GREEN}‚úÖ OpenAI API configured - you're all set!${NC}"
        echo ""
        echo -e "${CYAN}Try it now:${NC}"
        echo "  easyvoice                    # Start interactive mode"
        echo "  easyvoice chat               # Start text chat"
        echo "  easyvoice ask \"Hello!\"       # Ask your first question"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  OpenAI API key needed for full functionality${NC}"
        echo ""
        echo -e "${CYAN}To get started:${NC}"
        echo "  1. Get an API key at: https://platform.openai.com/api-keys"
        echo "  2. Run: export OPENAI_API_KEY=\"your-key-here\""
        echo "  3. Then try: easyvoice ask \"Hello!\""
    fi
    
    echo ""
    echo -e "${CYAN}All Commands:${NC}"
    echo "  easyvoice                    # Interactive mode with menu"
    echo "  easyvoice chat               # Start text chat"  
    echo "  easyvoice ask \"question\"     # Ask single question"
    echo "  easyvoice --help             # Show all options"
    echo ""
    echo -e "${CYAN}Optional Voice Features:${NC}"
    echo "  For voice conversations, install audio dependencies:"
    echo "  pip install 'easyvoice[audio]'"
    echo ""
    echo -e "${GREEN}üé§ Welcome to EasyVoice!${NC}"
    echo -e "${CYAN}Created by Ken Kai - AI Developer${NC}"
    echo -e "${CYAN}Follow more AI projects: Ken Kai does AI${NC}"
}

main() {
    print_header
    
    # Detect operating system
    detect_os
    print_step "Detected OS: $OS"
    
    # Check system requirements
    check_dependencies
    
    # Download and run appropriate installer
    download_and_run_installer
    
    # Setup OpenAI API for seamless experience
    setup_openai_api
    
    # Verify installation worked
    if verify_installation; then
        show_next_steps
    else
        print_error "Installation verification failed"
        print_step "Please check the output above for errors"
        print_step "You can try running 'pip install --user .' manually"
        exit 1
    fi
}

# Run main function
main "$@"