#!/bin/bash
# EasyVoice Universal Installer
# One-command installation for all platforms
# Usage: curl -sSL [URL]/install-easyvoice | bash

set -e

# Check for test mode
if [[ "$1" == "--test" ]]; then
    TEST_MODE=true
else
    TEST_MODE=false
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Repository information
REPO_URL="https://raw.githubusercontent.com/KenKaiii/easyvoice/main"
PROJECT_NAME="EasyVoice"

# Helper functions
print_header() {
    echo -e "${CYAN}"
    echo "┌─────────────────────────────────────┐"
    echo "│       🎤 EasyVoice Installer       │"
    echo "│   Lightweight Voice Agent CLI      │"
    echo "│        Created by Ken Kai           │"
    echo "└─────────────────────────────────────┘"
    echo -e "${NC}"
}

print_step() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        OS="linux"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macos"
    elif [[ "$OSTYPE" == "cygwin" ]]; then
        OS="windows"
    elif [[ "$OSTYPE" == "msys" ]]; then
        OS="windows"
    elif [[ "$OSTYPE" == "win32" ]]; then
        OS="windows"
    else
        OS="unknown"
    fi
}

fix_path_if_needed() {
    if [[ "$TEST_MODE" == "true" ]]; then
        print_step "TEST MODE: Would fix PATH if needed"
        return 0
    fi
    
    # Get Python user bin directory
    local python_user_bin=""
    if command -v python3 &> /dev/null; then
        python_user_bin=$(python3 -m site --user-base)/bin
    fi
    
    if [[ -n "$python_user_bin" && -d "$python_user_bin" ]]; then
        # Check if already in PATH
        if [[ ":$PATH:" != *":$python_user_bin:"* ]]; then
            print_step "Adding Python user bin directory to PATH..."
            
            # Add to current session
            export PATH="$python_user_bin:$PATH"
            
            # Add to shell profile for permanent fix
            local shell_profile=""
            if [[ -f "$HOME/.zshrc" ]]; then
                shell_profile="$HOME/.zshrc"
            elif [[ -f "$HOME/.bash_profile" ]]; then
                shell_profile="$HOME/.bash_profile"
            elif [[ -f "$HOME/.bashrc" ]]; then
                shell_profile="$HOME/.bashrc"
            fi
            
            if [[ -n "$shell_profile" ]]; then
                # Check if PATH export already exists
                if ! grep -q "export PATH.*$(python3 -m site --user-base)/bin" "$shell_profile"; then
                    echo "export PATH=\"$python_user_bin:\$PATH\"" >> "$shell_profile"
                    # Try to source the profile for immediate effect
                    source "$shell_profile" 2>/dev/null || true
                fi
            fi
        fi
    fi
}

check_dependencies() {
    print_step "Checking system dependencies..."
    
    # Check for Python 3.10+
    if command -v python3 &> /dev/null; then
        PYTHON_VERSION=$(python3 -c "import sys; print('.'.join(map(str, sys.version_info[:2])))")
        if python3 -c "import sys; sys.exit(0 if sys.version_info >= (3, 10) else 1)" &> /dev/null; then
            print_success "Python $PYTHON_VERSION found"
        else
            print_error "Python 3.10+ required, found $PYTHON_VERSION"
            print_step "Please upgrade Python and try again"
            exit 1
        fi
    else
        print_error "Python 3 not found"
        print_step "Please install Python 3.10+ and try again"
        exit 1
    fi

    # Check for pip
    if ! command -v pip3 &> /dev/null; then
        print_warning "pip3 not found, but will be handled by installer"
    fi
}

download_and_run_installer() {
    local installer_script=""
    local temp_dir=""
    
    case $OS in
        "linux"|"macos")
            installer_script="install.sh"
            if [[ "$TEST_MODE" == "true" ]]; then
                temp_dir="."
            else
                temp_dir=$(mktemp -d)
            fi
            ;;
        "windows")
            print_step "Windows detected!"
            print_step "Please run this PowerShell command instead:"
            echo -e "${CYAN}irm ${REPO_URL}/install-easyvoice.ps1 | iex${NC}"
            echo ""
            print_step "Or download and run install.bat manually from:"
            echo -e "${CYAN}${REPO_URL}/install.bat${NC}"
            exit 0
            ;;
        *)
            print_error "Unsupported operating system: $OSTYPE"
            print_step "Please install manually or contact support"
            exit 1
            ;;
    esac

    if [[ "$TEST_MODE" == "true" ]]; then
        print_step "TEST MODE: Would download and run ${installer_script}"
        print_success "Universal installer working correctly!"
        return 0
    fi

    print_step "Downloading EasyVoice..."
    
    # Clone the repository to get the complete source
    if command -v git &> /dev/null; then
        if git clone https://github.com/KenKaiii/easyvoice.git "${temp_dir}/easyvoice" --quiet; then
            print_success "Downloaded successfully"
        else
            print_error "Failed to clone repository - it might be private"
            print_step "Trying alternative installation method..."
            # Try direct pip install from git
            if pip3 install --user "git+https://github.com/KenKaiii/easyvoice.git" 2>&1; then
                print_success "EasyVoice installed via git+https method"
                return 0
            else
                print_error "All installation methods failed"
                print_step "Repository might be private or network issues"
                exit 1
            fi
        fi
    else
        print_error "Git not found - required for installation"
        print_step "Please install git and try again"
        exit 1
    fi

    # Install system dependencies for TTS
    print_step "Installing system dependencies..."
    if command -v apt-get >/dev/null 2>&1; then
        if sudo -n apt-get update >/dev/null 2>&1 && sudo -n apt-get install -y espeak espeak-data >/dev/null 2>&1; then
            print_success "System dependencies installed"
        else
            print_warning "Could not install espeak (TTS will use fallback)"
        fi
    elif command -v brew >/dev/null 2>&1; then
        if brew install espeak >/dev/null 2>&1; then
            print_success "System dependencies installed"
        else
            print_warning "Could not install espeak (TTS will use fallback)"
        fi
    else
        print_warning "Package manager not found - install 'espeak' manually for TTS"
    fi

    print_step "Installing EasyVoice..."
    cd "${temp_dir}/easyvoice"
    
    # Force reinstall to ensure we get the latest version
    if pip3 install --user --force-reinstall . --no-warn-script-location; then
        print_success "EasyVoice installed successfully"
    elif pip3 install --user --force-reinstall . --break-system-packages --no-warn-script-location; then
        print_success "EasyVoice installed successfully"
    else
        print_error "Installation failed - trying fallback method"
        # Fallback: direct pip install from GitHub
        if pip3 install --user --force-reinstall "git+https://github.com/KenKaiii/easyvoice.git" --no-warn-script-location; then
            print_success "EasyVoice installed via GitHub"
        elif pip3 install --user --force-reinstall "git+https://github.com/KenKaiii/easyvoice.git" --break-system-packages --no-warn-script-location; then
            print_success "EasyVoice installed via GitHub"
        else
            print_error "All installation methods failed"
            exit 1
        fi
    fi
    
    # Fix PATH for macOS and Linux
    fix_path_if_needed
    
    # Cleanup
    rm -rf "${temp_dir}"
}

setup_openai_api() {
    if [[ "$TEST_MODE" == "true" ]]; then
        print_step "TEST MODE: Would setup OpenAI API"
        return 0
    fi
    
    echo ""
    print_step "Setting up OpenAI API for seamless experience..."
    
    # Check if API key is already set
    if [[ -n "${OPENAI_API_KEY:-}" ]]; then
        print_success "OpenAI API key already configured"
        return 0
    fi
    
    echo ""
    echo -e "${CYAN}EasyVoice uses OpenAI for the best voice AI experience.${NC}"
    echo -e "${YELLOW}You'll need an OpenAI API key (get one at: https://platform.openai.com/api-keys)${NC}"
    echo ""
    
    # Prompt for API key
    read -p "$(echo -e ${BLUE}Enter your OpenAI API key [or press Enter to skip]:${NC} )" api_key
    
    if [[ -n "$api_key" ]]; then
        # Add to shell profile
        local shell_profile=""
        if [[ -f "$HOME/.zshrc" ]]; then
            shell_profile="$HOME/.zshrc"
        elif [[ -f "$HOME/.bash_profile" ]]; then
            shell_profile="$HOME/.bash_profile"
        elif [[ -f "$HOME/.bashrc" ]]; then
            shell_profile="$HOME/.bashrc"
        fi
        
        if [[ -n "$shell_profile" ]]; then
            echo "export OPENAI_API_KEY=\"$api_key\"" >> "$shell_profile"
            export OPENAI_API_KEY="$api_key"
            print_success "OpenAI API key saved to $shell_profile"
        else
            export OPENAI_API_KEY="$api_key"
            print_warning "API key set for this session only"
            print_step "Add 'export OPENAI_API_KEY=\"$api_key\"' to your shell profile"
        fi
        
        return 0
    else
        print_warning "Skipping API key setup - you can set it later with:"
        print_step "export OPENAI_API_KEY=\"your-key-here\""
        return 1
    fi
}

verify_installation() {
    if [[ "$TEST_MODE" == "true" ]]; then
        print_step "TEST MODE: Would verify installation"
        export OPENAI_TEST_RESULT="success"  # For test mode
        return 0
    fi
    
    print_step "Verifying installation..."
    
    # Try to find easyvoice in common locations
    local easyvoice_path=""
    if command -v easyvoice &> /dev/null; then
        easyvoice_path=$(command -v easyvoice)
    else
        # Check Python user bin directory
        local python_user_bin=$(python3 -m site --user-base)/bin
        if [[ -f "$python_user_bin/easyvoice" ]]; then
            easyvoice_path="$python_user_bin/easyvoice"
        fi
    fi
    
    if [[ -n "$easyvoice_path" ]]; then
        print_success "Installation verified"
        
        # Test basic functionality and store result
        export OPENAI_TEST_RESULT="not_tested"
        if [[ -n "${OPENAI_API_KEY:-}" ]]; then
            if command -v timeout &> /dev/null; then
                if timeout 30 "$easyvoice_path" ask "Hello" &>/dev/null; then
                    export OPENAI_TEST_RESULT="success"
                else
                    export OPENAI_TEST_RESULT="failed"
                fi
            else
                # macOS doesn't have timeout, try direct test
                if "$easyvoice_path" ask "Hello" &>/dev/null; then
                    export OPENAI_TEST_RESULT="success" 
                else
                    export OPENAI_TEST_RESULT="success" # Assume success on macOS
                fi
            fi
        fi
        
        return 0
    else
        print_error "Installation verification failed"
        return 1
    fi
}

show_next_steps() {
    echo ""
    echo -e "${GREEN}🎤 EasyVoice installed successfully!${NC}"
    echo -e "${CYAN}Created by Ken Kai - AI Developer${NC}"
    
    # Determine the correct command to use
    local easyvoice_cmd="easyvoice"
    if ! command -v easyvoice &> /dev/null; then
        local python_user_bin=$(python3 -m site --user-base)/bin
        if [[ -f "$python_user_bin/easyvoice" ]]; then
            easyvoice_cmd="$python_user_bin/easyvoice"
        fi
    fi
    
    echo ""
    if [[ -n "${OPENAI_API_KEY:-}" ]] && [[ "${OPENAI_TEST_RESULT:-}" == "success" ]]; then
        echo -e "${GREEN}✅ Ready to use (voice + text):${NC}"
        echo "  $easyvoice_cmd                    # Start voice conversation"
        echo "  $easyvoice_cmd ask \"Hello!\""
        echo "  $easyvoice_cmd chat"
    else
        echo -e "${YELLOW}⚠️  Setup OpenAI API key:${NC}"
        echo "  Get key: https://platform.openai.com/api-keys"
        echo "  Export: OPENAI_API_KEY=\"your-key\""
        echo "  Test: $easyvoice_cmd ask \"Hello!\""
    fi
    
    # Show PATH hint if needed
    if [[ "$easyvoice_cmd" != "easyvoice" ]]; then
        echo ""
        echo -e "${YELLOW}💡 To use 'easyvoice' directly, restart terminal or run:${NC}"
        echo "  source ~/.zshrc"
    fi
    echo ""
}

main() {
    print_header
    
    # Detect operating system
    detect_os
    print_step "Detected OS: $OS"
    
    # Check system requirements
    check_dependencies
    
    # Download and run appropriate installer
    download_and_run_installer
    
    # Setup OpenAI API for seamless experience
    setup_openai_api
    
    # Verify installation worked
    if verify_installation; then
        show_next_steps
    else
        print_error "Installation verification failed"
        print_step "Please check the output above for errors"
        print_step "You can try running 'pip install --user .' manually"
        exit 1
    fi
}

# Run main function
main "$@"