#!/bin/bash
# EasyVoice Universal Installer
# One-command installation for all platforms
# Usage: curl -sSL [URL]/install-easyvoice | bash

set -e

# Check for test mode
if [[ "$1" == "--test" ]]; then
    TEST_MODE=true
else
    TEST_MODE=false
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Repository information
REPO_URL="https://raw.githubusercontent.com/KenKaiii/easyvoice/main"
PROJECT_NAME="EasyVoice"

# Helper functions
print_header() {
    echo -e "${CYAN}"
    echo "┌─────────────────────────────────────┐"
    echo "│       🎤 EasyVoice Installer       │"
    echo "│   Lightweight Voice Agent CLI      │"
    echo "│        Created by Ken Kai           │"
    echo "└─────────────────────────────────────┘"
    echo -e "${NC}"
}

print_step() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        OS="linux"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macos"
    elif [[ "$OSTYPE" == "cygwin" ]]; then
        OS="windows"
    elif [[ "$OSTYPE" == "msys" ]]; then
        OS="windows"
    elif [[ "$OSTYPE" == "win32" ]]; then
        OS="windows"
    else
        OS="unknown"
    fi
}

fix_path_if_needed() {
    if [[ "$TEST_MODE" == "true" ]]; then
        print_step "TEST MODE: Would fix PATH if needed"
        return 0
    fi
    
    # Get Python user bin directory
    local python_user_bin=""
    if command -v python3 &> /dev/null; then
        python_user_bin=$(python3 -m site --user-base)/bin
    fi
    
    if [[ -n "$python_user_bin" && -d "$python_user_bin" ]]; then
        # Check if already in PATH
        if [[ ":$PATH:" != *":$python_user_bin:"* ]]; then
            print_step "Adding Python user bin directory to PATH..."
            
            # Add to current session
            export PATH="$python_user_bin:$PATH"
            
            # Add to shell profile for permanent fix
            local shell_profile=""
            if [[ -f "$HOME/.zshrc" ]]; then
                shell_profile="$HOME/.zshrc"
            elif [[ -f "$HOME/.bash_profile" ]]; then
                shell_profile="$HOME/.bash_profile"
            elif [[ -f "$HOME/.bashrc" ]]; then
                shell_profile="$HOME/.bashrc"
            fi
            
            if [[ -n "$shell_profile" ]]; then
                # Check if PATH export already exists
                if ! grep -q "export PATH.*$(python3 -m site --user-base)/bin" "$shell_profile"; then
                    echo "export PATH=\"$python_user_bin:\$PATH\"" >> "$shell_profile"
                    print_success "Added Python user bin to PATH in $shell_profile"
                    
                    # Try to source the profile for immediate effect
                    if source "$shell_profile" 2>/dev/null; then
                        print_success "PATH updated for current session"
                    else
                        print_step "You'll need to restart terminal or run: source $shell_profile"
                    fi
                fi
            fi
        fi
    fi
}

check_dependencies() {
    print_step "Checking system dependencies..."
    
    # Check for Python 3.10+
    if command -v python3 &> /dev/null; then
        PYTHON_VERSION=$(python3 -c "import sys; print('.'.join(map(str, sys.version_info[:2])))")
        if python3 -c "import sys; sys.exit(0 if sys.version_info >= (3, 10) else 1)" &> /dev/null; then
            print_success "Python $PYTHON_VERSION found"
        else
            print_error "Python 3.10+ required, found $PYTHON_VERSION"
            print_step "Please upgrade Python and try again"
            exit 1
        fi
    else
        print_error "Python 3 not found"
        print_step "Please install Python 3.10+ and try again"
        exit 1
    fi

    # Check for pip
    if ! command -v pip3 &> /dev/null; then
        print_warning "pip3 not found, but will be handled by installer"
    fi
}

download_and_run_installer() {
    local installer_script=""
    local temp_dir=""
    
    case $OS in
        "linux"|"macos")
            installer_script="install.sh"
            if [[ "$TEST_MODE" == "true" ]]; then
                temp_dir="."
            else
                temp_dir=$(mktemp -d)
            fi
            ;;
        "windows")
            print_step "Windows detected!"
            print_step "Please run this PowerShell command instead:"
            echo -e "${CYAN}irm ${REPO_URL}/install-easyvoice.ps1 | iex${NC}"
            echo ""
            print_step "Or download and run install.bat manually from:"
            echo -e "${CYAN}${REPO_URL}/install.bat${NC}"
            exit 0
            ;;
        *)
            print_error "Unsupported operating system: $OSTYPE"
            print_step "Please install manually or contact support"
            exit 1
            ;;
    esac

    if [[ "$TEST_MODE" == "true" ]]; then
        print_step "TEST MODE: Would download and run ${installer_script}"
        print_success "Universal installer working correctly!"
        return 0
    fi

    print_step "Downloading EasyVoice source code..."
    
    # Clone the repository to get the complete source
    if command -v git &> /dev/null; then
        print_step "Cloning from: https://github.com/KenKaiii/easyvoice.git"
        if git clone https://github.com/KenKaiii/easyvoice.git "${temp_dir}/easyvoice" 2>&1; then
            print_success "Repository cloned successfully"
            print_step "Checking cloned files..."
            ls -la "${temp_dir}/easyvoice/"
        else
            print_error "Failed to clone repository - it might be private"
            print_step "Trying alternative installation method..."
            # Try direct pip install from git
            if pip3 install --user "git+https://github.com/KenKaiii/easyvoice.git" 2>&1; then
                print_success "EasyVoice installed via git+https method"
                return 0
            else
                print_error "All installation methods failed"
                print_step "Repository might be private or network issues"
                exit 1
            fi
        fi
    else
        print_error "Git not found - required for installation"
        print_step "Please install git and try again"
        exit 1
    fi

    print_step "Installing EasyVoice..."
    cd "${temp_dir}/easyvoice"
    
    print_step "Current directory: $(pwd)"
    print_step "Checking for pyproject.toml..."
    ls -la pyproject.toml
    
    # Run pip install directly since we have the full source
    print_step "Attempting pip install --user . ..."
    if pip3 install --user . --no-warn-script-location 2>&1; then
        print_success "EasyVoice installed successfully"
    else
        print_step "First attempt failed, trying with --break-system-packages..."
        if pip3 install --user . --break-system-packages --no-warn-script-location 2>&1; then
            print_success "EasyVoice installed successfully (with system packages override)"
        else
            print_error "Installation failed"
            print_step "Try running: pip3 install --user git+https://github.com/KenKaiii/easyvoice.git"
            exit 1
        fi
    fi
    
    # Fix PATH for macOS and Linux
    fix_path_if_needed
    
    # Cleanup
    rm -rf "${temp_dir}"
}

setup_openai_api() {
    if [[ "$TEST_MODE" == "true" ]]; then
        print_step "TEST MODE: Would setup OpenAI API"
        return 0
    fi
    
    echo ""
    print_step "Setting up OpenAI API for seamless experience..."
    
    # Check if API key is already set
    if [[ -n "${OPENAI_API_KEY:-}" ]]; then
        print_success "OpenAI API key already configured"
        return 0
    fi
    
    echo ""
    echo -e "${CYAN}EasyVoice uses OpenAI for the best voice AI experience.${NC}"
    echo -e "${YELLOW}You'll need an OpenAI API key (get one at: https://platform.openai.com/api-keys)${NC}"
    echo ""
    
    # Prompt for API key
    read -p "$(echo -e ${BLUE}Enter your OpenAI API key [or press Enter to skip]:${NC} )" api_key
    
    if [[ -n "$api_key" ]]; then
        # Add to shell profile
        local shell_profile=""
        if [[ -f "$HOME/.zshrc" ]]; then
            shell_profile="$HOME/.zshrc"
        elif [[ -f "$HOME/.bash_profile" ]]; then
            shell_profile="$HOME/.bash_profile"
        elif [[ -f "$HOME/.bashrc" ]]; then
            shell_profile="$HOME/.bashrc"
        fi
        
        if [[ -n "$shell_profile" ]]; then
            echo "export OPENAI_API_KEY=\"$api_key\"" >> "$shell_profile"
            export OPENAI_API_KEY="$api_key"
            print_success "OpenAI API key saved to $shell_profile"
        else
            export OPENAI_API_KEY="$api_key"
            print_warning "API key set for this session only"
            print_step "Add 'export OPENAI_API_KEY=\"$api_key\"' to your shell profile"
        fi
        
        return 0
    else
        print_warning "Skipping API key setup - you can set it later with:"
        print_step "export OPENAI_API_KEY=\"your-key-here\""
        return 1
    fi
}

verify_installation() {
    if [[ "$TEST_MODE" == "true" ]]; then
        print_step "TEST MODE: Would verify installation"
        return 0
    fi
    
    print_step "Verifying installation..."
    
    # Try to find easyvoice in common locations
    local easyvoice_path=""
    if command -v easyvoice &> /dev/null; then
        easyvoice_path=$(command -v easyvoice)
    else
        # Check Python user bin directory
        local python_user_bin=$(python3 -m site --user-base)/bin
        if [[ -f "$python_user_bin/easyvoice" ]]; then
            easyvoice_path="$python_user_bin/easyvoice"
        fi
    fi
    
    if [[ -n "$easyvoice_path" ]]; then
        local version=$("$easyvoice_path" --version 2>/dev/null || echo "unknown")
        print_success "EasyVoice installed successfully! Version: $version"
        
        # Test basic functionality
        if [[ -n "${OPENAI_API_KEY:-}" ]]; then
            print_step "Testing OpenAI connection..."
            if timeout 10 "$easyvoice_path" ask "Hello" &>/dev/null; then
                print_success "OpenAI integration working!"
            else
                print_warning "OpenAI test failed - check your API key and internet connection"
            fi
        fi
        
        return 0
    else
        print_warning "easyvoice command not found"
        print_step "Installation may have failed or PATH needs to be updated"
        return 1
    fi
}

show_next_steps() {
    echo ""
    echo -e "${GREEN}🎉 EasyVoice is Ready!${NC}"
    echo ""
    
    # Determine the correct command to use
    local easyvoice_cmd="easyvoice"
    if ! command -v easyvoice &> /dev/null; then
        local python_user_bin=$(python3 -m site --user-base)/bin
        if [[ -f "$python_user_bin/easyvoice" ]]; then
            easyvoice_cmd="$python_user_bin/easyvoice"
        fi
    fi
    
    if [[ -n "${OPENAI_API_KEY:-}" ]]; then
        echo -e "${GREEN}✅ OpenAI API configured - you're all set!${NC}"
        echo ""
        echo -e "${CYAN}Try it now:${NC}"
        echo "  $easyvoice_cmd                    # Start interactive mode"
        echo "  $easyvoice_cmd chat               # Start text chat"
        echo "  $easyvoice_cmd ask \"Hello!\"       # Ask your first question"
    else
        echo -e "${YELLOW}⚠️  OpenAI API key needed for full functionality${NC}"
        echo ""
        echo -e "${CYAN}To get started:${NC}"
        echo "  1. Get an API key at: https://platform.openai.com/api-keys"
        echo "  2. Run: export OPENAI_API_KEY=\"your-key-here\""
        echo "  3. Then try: $easyvoice_cmd ask \"Hello!\""
    fi
    
    echo ""
    echo -e "${CYAN}All Commands:${NC}"
    echo "  $easyvoice_cmd                    # Interactive mode with menu"
    echo "  $easyvoice_cmd chat               # Start text chat"  
    echo "  $easyvoice_cmd ask \"question\"     # Ask single question"
    echo "  $easyvoice_cmd --help             # Show all options"
    echo ""
    
    # Show PATH hint if needed
    if [[ "$easyvoice_cmd" != "easyvoice" ]]; then
        echo -e "${YELLOW}🔄 PATH Updated! To use 'easyvoice' command immediately, run:${NC}"
        local shell_profile=""
        if [[ -f "$HOME/.zshrc" ]]; then
            shell_profile="~/.zshrc"
        elif [[ -f "$HOME/.bash_profile" ]]; then
            shell_profile="~/.bash_profile"
        elif [[ -f "$HOME/.bashrc" ]]; then
            shell_profile="~/.bashrc"
        fi
        
        if [[ -n "$shell_profile" ]]; then
            echo -e "${CYAN}  source $shell_profile${NC}"
        else
            echo -e "${CYAN}  source ~/.zshrc${NC}   # or restart your terminal"
        fi
        echo ""
        echo -e "${GREEN}After running the source command above, you can use 'easyvoice' directly!${NC}"
        echo ""
    fi
    
    echo -e "${CYAN}Optional Voice Features:${NC}"
    echo "  For voice conversations, install audio dependencies:"
    echo "  pip install 'easyvoice[audio]'"
    echo ""
    echo -e "${GREEN}🎤 Welcome to EasyVoice!${NC}"
    echo -e "${CYAN}Created by Ken Kai - AI Developer${NC}"
    echo -e "${CYAN}Follow more AI projects: Ken Kai does AI${NC}"
}

main() {
    print_header
    
    # Detect operating system
    detect_os
    print_step "Detected OS: $OS"
    
    # Check system requirements
    check_dependencies
    
    # Download and run appropriate installer
    download_and_run_installer
    
    # Setup OpenAI API for seamless experience
    setup_openai_api
    
    # Verify installation worked
    if verify_installation; then
        show_next_steps
    else
        print_error "Installation verification failed"
        print_step "Please check the output above for errors"
        print_step "You can try running 'pip install --user .' manually"
        exit 1
    fi
}

# Run main function
main "$@"